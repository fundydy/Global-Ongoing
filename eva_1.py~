#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
from math import cos,sin,pi
import sys
import numpy as np
import pandas as pd
import os
#    cov : bool or str, optional
#        If given and not `False`, return not just the estimate but also its covariance matrix. By default, the covariance are scaled by chi2/sqrt(N-dof), i.e., the weights are presumed to be unreliable except in a relative sense and everything is scaled such that the reduced chi2 is unity. This scaling is omitted if ``cov='unscaled'``, as is relevant for the case that the weights are 1/sigma**2, with sigma known to be a reliable estimate of the uncertainty.
#        如果给出且不是“ False”，则不仅返回估计值，还返回其协方差矩阵。 默认情况下，协方差由chi2 / sqrt（N-dof）缩放，即除相对意义上的权重被假定为不可靠的，并且一切都缩放以使减少的chi2统一。 如果``cov ='unscaled'''，则忽略此缩放比例，这与权重为1 / sigma ** 2的情况有关，已知sigma是不确定性的可靠估计。

def trend(x):
	#trend=np.polyfit(x[:,0],x[:,1],1,cov='unscaled')
	trend=np.polyfit(x[:,0],x[:,1],1,cov=True)
	p=np.poly1d(trend[0])
	covm=trend[1]
	cov=covm[0,1]
	timestd=np.std(x[:,0],ddof=1)
	ustd=np.std(x[:,1],ddof=1)
	r=cov/(timestd*ustd)
	print(r)
	print(len(x[:,0]))
	unc=np.absolute(p[1]*np.sqrt(np.absolute(1/(r*r)-1)/(len(x[:,0])-2)))
	result=np.array([p[1],unc])
	return result

def res(x):
	trend=np.polyfit(x[:,0],x[:,1],1)
	p=np.poly1d(trend)
	res=x[:,1]-p(x[:,0])
	return res
#   RMS
def resrms(x):
    n=len(x)
    rms=(sum(x*x)/(n-1))**0.5
    return rms

#   WRMS
def wrms(x,sig):
    lam=np.reciprocal(sig*sig)
    xlam=sum(x*lam)/sum(lam)
    wrms=(sum(lam*(x-xlam)*(x-xlam))/sum(lam))**0.5
    return wrms


#===============================================================================
#Main program
#===============================================================================

np.set_printoptions(precision=6, suppress=True)


site=sys.argv[1]
tenvfile='./'+site + '.tenv'
tenv=pd.read_csv(tenvfile,header=None,sep='\s+')
tenv.columns=["st","ymd","dyr","mjd","gw","gd","e","n","u","zero","de","dn","du","ce","cn","cu"]	
u0=tenv[["dyr","u"]]
u0=np.array(u0)
du=tenv[["du"]]
du=np.array(du)
resu0=res(u0)
std0=np.std(resu0,ddof=1)*1000
rms0=resrms(resu0)*1000
wrms0=wrms(u0[:,1],du[:,0])*1000
tr0=trend(u0)*1000
print('{0}_origin	{1:5.3f} ± {5:4.2f} mm/yr	res_RMS={2:5.3f} mm	WRMS={3:5.3f} mm	res_STD={4:5.3f} mm'.format(site,tr0[0],rms0,wrms0,std0,tr0[1]))



