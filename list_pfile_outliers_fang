#!/bin/tcsh
#
##BRIEF
# Script to list outliers in a .pfiles file generated from poscov files.
# Based on the timeseries plot code. Needs GMT 4.0 to work.
#
##AUTHOR
# Jeff Freymueller
#
##DATE 
#
# 5/6/10
#
##CHANGELOG
# 2010-08-12 (ronni) -added special comments for sh2doc to work
#                    -generalized the code to take command line parameters
# 2010-08-13 (ronni) -added -rf flag to give formatted output for rerun-from-rinex


set USAGE = "\nUSAGE: $0 -station SSSS -limits LOWER UPPER -sr SR -rf -c ENU\n\
 -station.SSSS .......... GPS station name in (case insensitive)\n\
 -limits..LOWER UPPER ... Limits for the residuals. Both values\n\
 ........................ must be given.\n\
 -sr......SR............. Scaled residual (residual/variance)\n\
 -rf..................... Rerun formatted output for rerun-from-rinex (optional)\n\
 -c <ENU> ............... pick component(s) to be printed (default ENU)\n\
 ........................ examples are: N, NU, EU, U, UNE ...\n" 

set k = 1
set station      = 0
set upper_limit  = 0
set lower_limit  = 0
set sr           = 0
set rf           = 0
set comps        = "E N U"
rm tmp.badtimepoint
rm tmp.badtimepoint0


while ($k <= $#argv)

   switch ( $argv[$k] )

   case -station:
      @ k++
      set station = `toupper.pl $argv[$k]`
      breaksw

   case -limits:
      @ k++
      set lower_limit  = $argv[$k]
      @ k++
      set upper_limit  = $argv[$k]
      breaksw

   case -sr:
      @ k++
      set sr = $argv[$k]
      breaksw

   case -rf:
      set rf = 1
      breaksw

   case -c
      @ k++
      #insert spaces into the given formatting string and
      set comps = `echo $argv[$k] | grep \[0-9a-df-mo-tv-zA-DF-MO-TV-Z\]`
      if ($comps != "") then 
        echo ""
        echo ILLEGAL PARAMETER IN '-c': $argv[$k], only 'E','N','U' and combinations are allowed!
        echo $USAGE
      endif 
 
      #assign it to comps
      set comps = `echo $argv[$k] | gawk '{split($1, dirs, null); \
                                             for (d in dirs){ \
                                               printf dirs[d] " ";\
                                             }}'`
      breaksw

   default:
      echo ""
      echo ILLEGAL ARGUMENT: $argv[$k]
      echo $USAGE
      exit
   endsw

   @ k++
end

if ( $station == 0 || $upper_limit == $lower_limit || $sr == 0) then
        echo $USAGE
        exit
endif

set pfiles = $station.pfiles
rm ${pfiles}corrected
cp ${pfiles}  ${pfiles}corrected

#
cat $pfiles |  awk '{printf" %s %s %s %s \n",$1,$4, $7, $5}' >! tmp.datE
cat $pfiles |  awk '{printf" %s %s %s \n",$1,$5, $8}' >! tmp.datN
cat $pfiles |  awk '{printf" %s %13.2f %s\n",$1,$6*1000.0,$9}' >! tmp.datU

awk -f /gipsy/bin/deg2mm_e.awk tmp.datE > tmp.datE.new
awk -f /gipsy/bin/deg2mm_n.awk tmp.datN > tmp.datN.new
\mv tmp.datE.new tmp.datE
\mv tmp.datN.new tmp.datN

foreach comp ( $comps )

   #stop if too short.
   if ( `cat tmp.dat$comp | wc | awk '{print $1}' ` < 2 ) exit

   #trend1d is told to plot: TIME RESIDUAL FIT-WEIGHT (weight is then converted to SIGMA using awk), 
   awk '{printf "%9.4f %10.4f %10.8f\n", ($1-2000)*1000,$2,1/($3*$3)}' tmp.dat$comp  \
      | trend1d -Np2 -W -Fxrw --D_FORMAT=%.8f \
      | awk '{print $1 " " $2 " " 1/sqrt($3)}' >! tmp.xrs0
   paste tmp.xrs0 $pfiles > pas$comp
   #gotta do variable passing to awk, then compare values to limits and print if above
   #paste tmp.xrs0 $pfiles | awk -v U="$upper_limit" -v L="$lower_limit" -v S="$sr" '$2 > U || $2 < L || ($2/$3) > S {print "'$comp' " $16 " " $2 " " $3}' >> 
   paste tmp.xrs0 $pfiles | awk -v U="$upper_limit" -v L="$lower_limit" -v S="$sr" '$2 > U || $2 < L || ($2/$3) > S {print $0 $comps}'|cut -f 4 -d " " >> tmp.badtimepoint
end
cat tmp.badtimepoint|sort -nu >tmp.badtimepoint0
wc -l ${pfiles}
wc -l tmp.badtimepoint
wc -l tmp.badtimepoint0
foreach tp (`cat tmp.badtimepoint0`)
	
	sed -i '/^ '"${tp}"'/d' ${pfiles}corrected   
end
wc -l ${pfiles}corrected

